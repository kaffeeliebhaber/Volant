
Item; ItemManager; Inventory; EquipmentManager




CASE 1
-----------------------------------------------------------
Wenn der Spieler das Item picked:
1. Item verschwindet aus dem ItemManager
2. Item wird in das Inventar des Spielers hinzugefügt.


CASE 2
-----------------------------------------------------------
Wenn der Spieler das Item benutzt:
1. ItemAction wird ausgefügt.
2. Item verschwindet aus dem Inventar


CASE 3
-----------------------------------------------------------
Wenn der Spieler das Item ausrüstet:
1. Item verschwindet aus dem Inventar
2. Item wird dem EquipmentManager hinzugefügt.









LEBENSZYKLUS: ITEM
GAMEWORLD -> ITEMMANAGER -> INVENTORY -> [USE | EQUIP]





/// -----------------------------


item.registerItemListener(ItemListener l);

Wenn die Item.use() methode called wird, dann wird eine notifyAllItemListener gecalled..
new ItemEvent(Item item, [USED, EQUIPED])




1. 
	Neues Interface: IItemListener
	Methode: void itemCalled(ItemEvent itemEvent);

2.
	Neue Klasse: class ItemEvent
	Attribute:
	* Item item
	* ItemCallType (enum: USED, EQUIPED)
3. 
	* Item muss um Liste von IItemListener erweitert werden
	* Item muss um folgende Methoden erweitert werden:
		> registerItemListener(ItemListener listener)
		> unregisterItemListener(ItemListener listener)
		> notifyAllItemListener() | Informiert alle Listener, dass das Item benutzt wurde
4.
	VIELLEICHT WERFEN! Das Item muss um eine Instanzvariable des ItemManagers erweitert werden.	
	
5.
	Implementierung des Interface IItemListener in folgenden Klassen
		> Inventory
		> EquipmentManager
6.
	item.registerItemListener(inventory)
	item.registerItemListener(equipmentManager)
	
	
/// -----------------------------

> Player erhält Instanz von Inventory als Attribute
> Inventory erhält Instanz von InventoryManager und EquipmentManager
> Inventory.addItem(Item) registriert automatisch InventoryManager und EquipmentManager als IItemListener am Item.



/// -----------------------------




NEUE KLASSE

public class Inventory implements IItemListener {

	private final InventoryManager inventoryManager;
	private final EquipmentManager equipmentManager;
	
	public Inventory(final InventoryManager inventoryManager, final EquipmentManager equipmentManager) {}
	
	public void addItem(final Item item) {
		item.registerItemListener(this);
		inventoryManager.addItem(item);
	}
	
	
	public void received(Item item, State state) {
		
	}
	
	@Override
	public void itemCalled(ItemEvent itemEvent) {
		final ItemCallType itemCallType = itemEvent.getItemCallType();
		final Item currentItem = itemEvent.getItem();
		
		switch (itemCallType) {
			case USED: 
				//currentItem.unregisterItemListener(this);
				// TODO: Was passiert, wenn von 10 Heiltränken nur einer benutzt wird? 
				break;
			case EQUIPED:
				inventoryManager.removeItem(currentItem);
				equipmentManager.equip(currentItem);
				break;
		}
		
	}
}


public class Player {

	private final Inventory inventory;
	
	public void addItem(final Item item) {
		inventory.addItem(item);
	}
}

public final class ItemManager {

	private List<IItemUpdate) itemUpdateListener;
	
	public void update() {
		this.notifyAll(new Item(), State.PICKED);
	}
	
	public void notifyAll(Item item, State state) {
		itemUpdateListener.stream().forEach(l -> l.received(item, state));
	}
}

/// -----------------------------


[Name des Interface: IItemUpdateListener oder IItemChangedListener]

Neues Interface: interface IItemUpdate
Methode:  void itemUpdated(Item item, ItemState itemState, boolean empty)

Das Inventory registriert sich als Listener am Item
Dadurch kann das Inventory darauf reagieren


Das UIInventory registriert sich als Listener am Inventory (Neues Interface: IInventoryListener; Methode: void inventoryChanged(Inventory inventory, Item item, ItemState itemState)
Durch die inventoryChanged Methode kann sich das UIInventory neu initialisieren (aktuell: clear() und init())


Das Inventary registriert sich als Listener am ItemManager. Wenn ein Item gepicked wurde, informiert der ItemManager alle Listener(ItemManager informiert Inventory z.B. itemPicked
IItemManagerListener)

Flow A: Item wird in der Welt gepickt
1. In der ItemManager.update(player (vielleicht sogar nur [final Entity entity]) Methode wird festgestellt, dass ein Item gepicked wurde
2. Item wird aus dem ItemManager entfernt
3. ItemManager informiert alle Listener, dass ein Item gepicked wurde.
4. Das Inventory erhält die Information des ItemManagers, dass ein Item gepicked wurde.
5. Das Inventory fügt das Item als Element in den neuen InventoryManager hinzu. 
6. Das Inventory informiert alle Listener, dass sich am Inventory etwas geändert hat (z.b. erhält nun das UIInventory die Information -> kann sich aktualisieren)

Flow B: Item wird aus dem Inventory benutzt
1. Item wird benutzt (item.use() wird aufgerufen)
2. Das Item informiert alle Listener (IItemChangedListener)
3. Das Inventory bekommt über die Methode (IItemChangedListener.update(item, state, empty)) die Information, dass sich etwas an einem Item geändert hat.
	> Je nach State (PICKED, USED, EQUIPED, UNEQIPPED) kann darauf reagiert werden.

	FALL: EQUIP
	a) Das Item muss aus dem InventoryManager entfernt werden
	b) Das Item muss dem EquipedManager hinzugefügt werden.
	c) Es müssen alle InventoryListener informiert werden, dass sich am Inventory etwas geändert hat


/// -----------------------------

//
// ENUMS
//
enum State {
	PICKED, USED, EQUIPED, UNEQUIPPED;
}

//
// INTERFACES
//
interface IItemChangedListener {
	void itemChanged(Item item, State state, boolean empty);
}

interface IInventoryListener {
	void inventoryChanged(Inventory inventory, Item item, State state);
}

interface IItemManagerListener {
	void itemPicked(Item pickedItem);
}

//
// ITEMMANAGER
//
class ItemManager {

	private List<IItemManagerListener> itemManagerListeners;
	
	void update(final Entity entity) {
	
		this.fireItemPickedEvent(item);
	}
	
	private void fireItemPickedEvent(final Item pickedItem) {
		itemManagerListeners.stream().forEach(l -> l.itemPicked(pickedItem);
	}
	
	public void registerItemManagerListener(final IItemManagerListener l) {
		itemManagerListeners.add(l);
	}
	
}

//
// INVENTORY
//
class Inventory implements IItemManagerListener, IItemChangedListener {

	private List<IInventoryListener> inventoryListeners;
	private InventoryManager inventoryManager;
	private EquipedManager equipedManager;
	
	private void fireInventoryChangedEvent(Item item, State state) {
		inventoryListeners.stream().forEach(l -> l.inventoryChanged(this, item, state));
	}
	
	public void registerInventoryListeners(final IInventoryListener l) {
		inventoryListeners.add(l);
	}
	
	@Override
	public void itemPicked(Item pickedItem) {
		inventoryManager.addItem(pickedItem);
		this.fireInventoryChangedEvent(pickedItem, State.PICKED);
	}
	
	@Override
	public void itemChanged(Item item, State state, boolean empty) {
		if (state == State.USED && empty) {
			inventoryManager.remove(item);
		} else if (state == EQUIPED) {
			inventoryManager.remove(item);
			equipedManager.add(item);
		} else if (state == UNEQUIPED) {
			equipedManager.remove(item);
			inventoryManager.add(item);
		}
	}
}

//
// Item
//
public class Item {
	
	private List<IItemChangedListener> itemChangedListeners;
	
	public void use() {
		
		boolean empty = !isAvailable(); // BEISPIEL AUS DER USEITEM-CLASS
		this.fireItemChangedEvent(this, State.USED, empty);
	}
	
	private void fireItemChangedEvent(Item itemChanged, State state, boolean empty) {
		itemChangedListeners.stream().forEach(l -> l.itemChanged(itemChanged, state, empty));
	}
	
}

//
// IDEE: ABSTRAKTE BASIS KLASSE FÜR INVENTORYMANAGER & EQUIPMENTMANAGER
// Beinhaltet direkt die Methoden: add (abstrakt, da unterschiedliche Implementationen vorhanden sein müssen), remove, fireItemChangedEvent etc.
//

//
// INVENTORYMANAGER
//
public class InventoryManager {

	
	public void add(Item item) {
		
	}
	
	public void remove(Item item) {
	
	}
}
//
// EQUIPMENTMANAGER
//
public class EquipmentManager {
	
	public void add(Item item) {
		
	}
	
	public void remove(Item item) {
	
	}
}
//
// NOTE: ItemManager.registerItemManagerListener(Inventory);
// NOTE: inventory.registerInventoryListener(UIInventoryManager);
//


























